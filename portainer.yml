---
- name: Set up Portainer
  hosts: portainer
  become: true

  tasks:
    - name: Create {{portainer_config_dir}}
      file:
        path: "{{portainer_config_dir}}"
        state: directory
        mode: '0600'

    - name: Create docker-compose file
      template:
        src: portainer/docker-compose.yml.j2
        dest: "{{portainer_config_dir}}/docker-compose.yml"
        mode: '0600'

    - name: Start portainer
      docker_compose:
        project_src: "{{portainer_config_dir}}"

    - name: wait for portainer to start ({{inventory_hostname}}:{{ports.portainer}})
      wait_for:
        host: "{{inventory_hostname}}"
        port: "{{ports.portainer}}"
        sleep: 10

    - name: authenticate as admin user
      uri:
        url: "http://{{inventory_hostname}}:{{ports.portainer}}/api/auth"
        method: POST
        body_format: json
        body: 
          Username: admin
          Password: "{{ portainer_admin_password }}"
        status_code: 200
      register: auth_response

    - name: get endpoints
      uri:
        url: "http://{{inventory_hostname}}:{{ports.portainer}}/api/endpoints"
        method: GET
        headers:
          Authorization: "Bearer {{auth_response.json.jwt}}"
      register: endpoints

    - name: set up portainer to use local Docker endpoint
      uri:
        url: "http://{{inventory_hostname}}:{{ports.portainer}}/api/endpoints"
        method: POST
        headers:
          Authorization: "Bearer {{auth_response.json.jwt}}"
        body_format: form-urlencoded
        body:
          Name: local
          EndpointType: 1
        status_code: 200
      when: endpoints.json is not defined or (endpoints.json|length == 0)

    - name: get settings
      uri:
        url: "http://{{inventory_hostname}}:{{ports.portainer}}/api/settings"
        method: GET
        headers:
          Authorization: "Bearer {{auth_response.json.jwt}}"
      register: settings

    - name: update LDAP settings
      uri:
        url: "http://{{inventory_hostname}}:{{ports.portainer}}/api/settings"
        method: PUT
        headers:
          Authorization: "Bearer {{auth_response.json.jwt}}"
        body_format: json
        body:
          AuthenticationMethod: 2
          LDAPSettings:
            AnonymousMode: false
            AutoCreateUsers: true
            ReaderDN: "{{ldap.bind_dn}}"
            Password: "{{ldap.bind_dn_password}}"
            URL: "{{ldap.host}}:{{ldap.port}}"
            TLSConfig:
              TLS: true
              TLSSkipVerify: true
            StartTLS: true
            SearchSettings:
              - BaseDN: "{{ldap.base_dn}}"
                Filter: ""
                UserNameAttribute: "{{ldap.username_attribute}}"
            GroupSearchSettings: 
              - GroupBaseDN: "{{ldap.base_dn}}"
                GroupFilter: ""
                GroupAttribute: "member"
      when: "ldap.base_dn is defined"